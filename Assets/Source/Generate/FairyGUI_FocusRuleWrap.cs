//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class FairyGUI_FocusRuleWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(FairyGUI.FocusRule));
		L.RegVar("NotFocusable", get_NotFocusable, null);
		L.RegVar("Focusable", get_Focusable, null);
		L.RegVar("NavigationBase", get_NavigationBase, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<FairyGUI.FocusRule>.Check = CheckType;
		StackTraits<FairyGUI.FocusRule>.Push = Push;
	}

	static void Push(IntPtr L, FairyGUI.FocusRule arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(FairyGUI.FocusRule), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NotFocusable(IntPtr L)
	{
		ToLua.Push(L, FairyGUI.FocusRule.NotFocusable);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Focusable(IntPtr L)
	{
		ToLua.Push(L, FairyGUI.FocusRule.Focusable);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NavigationBase(IntPtr L)
	{
		ToLua.Push(L, FairyGUI.FocusRule.NavigationBase);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		FairyGUI.FocusRule o = (FairyGUI.FocusRule)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

