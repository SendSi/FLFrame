//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class FairyGUI_ProgressTitleTypeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(FairyGUI.ProgressTitleType));
		L.RegVar("Percent", get_Percent, null);
		L.RegVar("ValueAndMax", get_ValueAndMax, null);
		L.RegVar("Value", get_Value, null);
		L.RegVar("Max", get_Max, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<FairyGUI.ProgressTitleType>.Check = CheckType;
		StackTraits<FairyGUI.ProgressTitleType>.Push = Push;
	}

	static void Push(IntPtr L, FairyGUI.ProgressTitleType arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(FairyGUI.ProgressTitleType), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Percent(IntPtr L)
	{
		ToLua.Push(L, FairyGUI.ProgressTitleType.Percent);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ValueAndMax(IntPtr L)
	{
		ToLua.Push(L, FairyGUI.ProgressTitleType.ValueAndMax);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Value(IntPtr L)
	{
		ToLua.Push(L, FairyGUI.ProgressTitleType.Value);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Max(IntPtr L)
	{
		ToLua.Push(L, FairyGUI.ProgressTitleType.Max);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		FairyGUI.ProgressTitleType o = (FairyGUI.ProgressTitleType)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

