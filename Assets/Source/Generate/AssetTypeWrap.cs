//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class AssetTypeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(AssetType));
		L.RegVar("None", get_None, null);
		L.RegVar("Prefab", get_Prefab, null);
		L.RegVar("Texture", get_Texture, null);
		L.RegVar("SpriteAtlas", get_SpriteAtlas, null);
		L.RegVar("TextAsset", get_TextAsset, null);
		L.RegVar("Font", get_Font, null);
		L.RegVar("FGUI", get_FGUI, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<AssetType>.Check = CheckType;
		StackTraits<AssetType>.Push = Push;
	}

	static void Push(IntPtr L, AssetType arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(AssetType), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_None(IntPtr L)
	{
		ToLua.Push(L, AssetType.None);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Prefab(IntPtr L)
	{
		ToLua.Push(L, AssetType.Prefab);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Texture(IntPtr L)
	{
		ToLua.Push(L, AssetType.Texture);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SpriteAtlas(IntPtr L)
	{
		ToLua.Push(L, AssetType.SpriteAtlas);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TextAsset(IntPtr L)
	{
		ToLua.Push(L, AssetType.TextAsset);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Font(IntPtr L)
	{
		ToLua.Push(L, AssetType.Font);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FGUI(IntPtr L)
	{
		ToLua.Push(L, AssetType.FGUI);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		AssetType o = (AssetType)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

