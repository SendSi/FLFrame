//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class FairyGUI_AlignTypeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(FairyGUI.AlignType));
		L.RegVar("Left", get_Left, null);
		L.RegVar("Center", get_Center, null);
		L.RegVar("Right", get_Right, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<FairyGUI.AlignType>.Check = CheckType;
		StackTraits<FairyGUI.AlignType>.Push = Push;
	}

	static void Push(IntPtr L, FairyGUI.AlignType arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(FairyGUI.AlignType), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Left(IntPtr L)
	{
		ToLua.Push(L, FairyGUI.AlignType.Left);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Center(IntPtr L)
	{
		ToLua.Push(L, FairyGUI.AlignType.Center);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Right(IntPtr L)
	{
		ToLua.Push(L, FairyGUI.AlignType.Right);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		FairyGUI.AlignType o = (FairyGUI.AlignType)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

