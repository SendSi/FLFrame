//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class FairyGUI_OverflowTypeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(FairyGUI.OverflowType));
		L.RegVar("Visible", get_Visible, null);
		L.RegVar("Hidden", get_Hidden, null);
		L.RegVar("Scroll", get_Scroll, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<FairyGUI.OverflowType>.Check = CheckType;
		StackTraits<FairyGUI.OverflowType>.Push = Push;
	}

	static void Push(IntPtr L, FairyGUI.OverflowType arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(FairyGUI.OverflowType), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Visible(IntPtr L)
	{
		ToLua.Push(L, FairyGUI.OverflowType.Visible);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Hidden(IntPtr L)
	{
		ToLua.Push(L, FairyGUI.OverflowType.Hidden);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Scroll(IntPtr L)
	{
		ToLua.Push(L, FairyGUI.OverflowType.Scroll);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		FairyGUI.OverflowType o = (FairyGUI.OverflowType)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

