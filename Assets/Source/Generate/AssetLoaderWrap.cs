//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class AssetLoaderWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(AssetLoader), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("InitIsLoadBundle", InitIsLoadBundle);
		L.RegFunction("AddPackage", AddPackage);
		L.RegFunction("AddPackageAddressable", AddPackageAddressable);
		L.RegFunction("LoadUIPackage", LoadUIPackage);
		L.RegFunction("InstantiateAsync", InstantiateAsync);
		L.RegFunction("LoadAssetAsync", LoadAssetAsync);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("editorBundle", get_editorBundle, null);
		L.RegVar("editorPath", get_editorPath, null);
		L.RegVar("Instance", get_Instance, set_Instance);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitIsLoadBundle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AssetLoader obj = (AssetLoader)ToLua.CheckObject<AssetLoader>(L, 1);
			obj.InitIsLoadBundle();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddPackage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			AssetLoader obj = (AssetLoader)ToLua.CheckObject<AssetLoader>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			System.Action<System.Collections.Generic.List<string>> arg1 = (System.Action<System.Collections.Generic.List<string>>)ToLua.CheckDelegate<System.Action<System.Collections.Generic.List<string>>>(L, 3);
			obj.AddPackage(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddPackageAddressable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			AssetLoader obj = (AssetLoader)ToLua.CheckObject<AssetLoader>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			System.Action<object> arg1 = (System.Action<object>)ToLua.CheckDelegate<System.Action<object>>(L, 3);
			obj.AddPackageAddressable(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadUIPackage(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				AssetLoader obj = (AssetLoader)ToLua.CheckObject<AssetLoader>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action<System.Collections.Generic.List<string>> arg1 = (System.Action<System.Collections.Generic.List<string>>)ToLua.CheckDelegate<System.Action<System.Collections.Generic.List<string>>>(L, 3);
				System.Collections.IEnumerator o = obj.LoadUIPackage(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				AssetLoader obj = (AssetLoader)ToLua.CheckObject<AssetLoader>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action<System.Collections.Generic.List<string>> arg1 = (System.Action<System.Collections.Generic.List<string>>)ToLua.CheckDelegate<System.Action<System.Collections.Generic.List<string>>>(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				System.Collections.IEnumerator o = obj.LoadUIPackage(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AssetLoader.LoadUIPackage");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InstantiateAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				AssetLoader obj = (AssetLoader)ToLua.CheckObject<AssetLoader>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.InstantiateAsync(arg0);
				return 0;
			}
			else if (count == 3)
			{
				AssetLoader obj = (AssetLoader)ToLua.CheckObject<AssetLoader>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action<object> arg1 = (System.Action<object>)ToLua.CheckDelegate<System.Action<object>>(L, 3);
				obj.InstantiateAsync(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				AssetLoader obj = (AssetLoader)ToLua.CheckObject<AssetLoader>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action<object> arg1 = (System.Action<object>)ToLua.CheckDelegate<System.Action<object>>(L, 3);
				AssetType arg2 = (AssetType)ToLua.CheckObject(L, 4, typeof(AssetType));
				obj.InstantiateAsync(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AssetLoader.InstantiateAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAssetAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				AssetLoader obj = (AssetLoader)ToLua.CheckObject<AssetLoader>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.LoadAssetAsync(arg0);
				return 0;
			}
			else if (count == 3)
			{
				AssetLoader obj = (AssetLoader)ToLua.CheckObject<AssetLoader>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action<UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle<object>> arg1 = (System.Action<UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle<object>>)ToLua.CheckDelegate<System.Action<UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle<object>>>(L, 3);
				obj.LoadAssetAsync(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AssetLoader.LoadAssetAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_editorBundle(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, AssetLoader.editorBundle);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_editorPath(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, AssetLoader.editorPath);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.Push(L, AssetLoader.Instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Instance(IntPtr L)
	{
		try
		{
			AssetLoader arg0 = (AssetLoader)ToLua.CheckObject<AssetLoader>(L, 2);
			AssetLoader.Instance = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

